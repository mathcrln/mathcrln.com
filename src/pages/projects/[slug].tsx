import { GetStaticPaths, GetStaticProps } from 'next';
import { ParsedUrlQuery } from 'querystring';
import Container from '@/layout/Container';
import client from '@/graphql/apollo-client';
import ImageCard from '@/components/shared/ImageCard';
import Head from 'next/dist/next-server/lib/head';
import { serialize } from 'next-mdx-remote/serialize';
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote';
import { ALL_PROJECTS_SLUGS, PROJECT_PAGE } from '@/graphql/queries/projects';
import Skill from '@/components/shared/Skill';
import { ISkill } from 'src/types/skill';
import { IProject } from 'src/types/projects';

function H2({ children }: { children: JSX.Element }) {
	return <h2 className='text-3xl mt-14 mb-4 font-extrabold first-of-type:mt-0'>{children}</h2>;
}
function P({ children }: { children: JSX.Element }) {
	return <p className='mb-5'>{children}</p>;
}
const components = {
	h2: H2,
	p: P,
};

type ProjectProps = {
	project: IProject;
	source: MDXRemoteSerializeResult;
};
export default function Project({ project, source }: ProjectProps): JSX.Element {
	return (
		<>
			<Head>
				<title>{project ? project.name : 'Project'} | Mathieu CÃ©raline</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<div>
				{!project && (
					<Container className='my-14 relative'>
						<p>Seems like no project with this name has been found</p>
					</Container>
				)}
				{project && (
					<Container className='my-14 relative'>
						<div className='grid lg:grid-cols-[2fr,2fr] gap-10 mb-20'>
							<ImageCard cover={project.cover} className='h-80' />

							<div>
								<div className='mb-10 flex items-center justify-between flex-wrap'>
									<h1 className='text-3xl md:text-4xl font-extrabold flex-grow-1 pr-3'>{project.name}</h1>
									<div className='my-3 flex-0 '>
										<a className='font-thin bg-primary-dark rounded py-2 px-4 '>Live Demo</a>
									</div>
								</div>

								<p className='md:max-w-[750px]  md:text-left mb-4'>{project.description}</p>

								<div className='flex flex-wrap flex-1'>
									{project.skills && <span className='font-bold mr-2 '>Built with</span>}
									{project.skills && (
										<div className='flex  space-x-reverse flex-wrap items-center flex-1'>
											{project?.skills?.map((skill: ISkill) => (
												<Skill key={skill.name} skill={skill} className='mr-2' />
											))}
										</div>
									)}
								</div>
							</div>
						</div>
						<div className='my-24'>
							{/* <h2 className='text-5xl font-thin mx-auto my-10'>Case Study</h2> */}
							<div className='grid gap-10 | md:grid-cols-[1fr,4fr] '>
								<div className='space-y-2 bg-gray-900 p-6 -mx-5 | md:-mx-0 md:bg-transparent self-start md:border-r md:w-[170px] md:p-0 md:pr-4 mx:mx-0 md:max-w-[300px] md:sticky md:top-80 | xl:pr-8 xl:w-[250px] | border-primary-light dark:border-primary-dark'>
									<p className='font-bold text-primary-light  dark:text-primary-dark '>
										Project purpose and goals
									</p>
									<p>Web Stack and Explanation</p>
									<p>Problems and thought process</p>
									<p>Future Improvements</p>
								</div>
								<div className='space-y-3'>
									<div className=''>
										<MDXRemote {...source} components={components} />
									</div>
								</div>
							</div>
						</div>
						{/* <div className='my:20 md:my-32 lg:w-5/6 xl:w-4/6 mx-auto'>
							<h2 className='text-4xl  font-bold mb-14'>See more projects</h2>
							<div className=' grid md:grid-cols-2 gap-10 xl:gap-28'>
								<div>
									<ImageCard cover={project.cover} className='h-80' />
									<h3 className='text-2xl font-bold mt-6 mb-3'>Audiophile</h3>
									<p>
										{' '}
										Nam mattis fringilla quam. Mauris porta sodales diam, nec blandit ante sollicitudin et.
									</p>
									<a className='font-bold underline mt-3 inline-block'>View project</a>
								</div>
								<div>
									<ImageCard cover={project.cover} className='h-80' />
									<h3 className='text-2xl font-bold mt-6 mb-3'>Life is Mine</h3>
									<p>
										{' '}
										Nam mattis fringilla quam. Mauris porta sodales diam, nec blandit ante sollicitudin et.
									</p>
									<a className='font-bold underline mt-3 inline-block'>View project</a>
								</div>
							</div>
						</div> */}
					</Container>
				)}
			</div>
		</>
	);
}
export const getStaticPaths: GetStaticPaths = async () => {
	const { projects } = (await client.query({ query: ALL_PROJECTS_SLUGS })).data;
	const slugs = projects?.map((project: IProject) => `/projects/${project.slug}`);

	return {
		paths: slugs,
		fallback: false,
	};
};

type Props = {
	project: IProject;
	source: MDXRemoteSerializeResult;
	revalidate: number;
};

interface Params extends ParsedUrlQuery {
	slug: string;
}

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
	const { slug } = context.params as Params;

	const query = await client.query({
		query: PROJECT_PAGE,
		variables: {
			projectsWhere: { slug },
		},
	});

	const mdxSource = await serialize(query.data?.projects[0]?.content || 'No content');

	return {
		props: {
			project: query.data.projects[0],
			source: mdxSource,
			revalidate: 10,
		},
	};
};
